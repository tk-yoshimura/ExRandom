using System;
using System.Linq;

////debug
//Shuffle : generate check - OK
//RejectionNext : generate check - OK

namespace ExRandom {
    public static class RandomUtilitys {
        public static void Shuffle<Type>(MT19937 mt, Type[] array) {
            if(mt == null || array == null) {
                throw new ArgumentNullException();
            }

            Discrete.DiceRandom rd;

            for(int i = array.Length - 1, j; i >= 1; i--) {
                rd = new Discrete.DiceRandom(mt, i + 1);

                j = rd.Next();

                Type swap = array[j];
                array[j] = array[i];
                array[i] = swap;
            }
        }

        public static double RejectionNext(MT19937 mt, Continuous.Random rd, Func<double, double> adopt_prob_func) {
            if(mt == null || rd == null || adopt_prob_func == null) {
                throw new ArgumentNullException();
            }

            double r;

            do {
                r = rd.Next();
            } while(!mt.NextBool(adopt_prob_func(r)));

            return r;
        }

        public static int Round(MT19937 mt, double v) {
            if(mt == null) {
                throw new ArgumentNullException();
            }
                 
            int v_int = (int)Math.Floor(v);
            double v_frac = v - v_int;

            return v_int + (mt.NextBool(v_frac) ? 1 : 0);
        }

        public static bool[] Fill(MT19937 mt, int length, double prob) {
            if(mt == null) {
                throw new ArgumentNullException();
            }

            if(length <= 0) {
                throw new ArgumentException();
            }

            if(!(prob >= 0) || prob > 1) {
                throw new ArgumentOutOfRangeException();
            }

            int index, cnt, tgt = (int)(length * prob + 0.5);
            bool[] array = new bool[length];

            Discrete.DiceRandom dr = new Discrete.DiceRandom(mt, length);

            if(tgt < length / 2) {
                array = new bool[length];
                cnt = 0;

                while(cnt < tgt) {
                    index = dr.Next();

                    if(array[index] == false) {
                        array[index] = true;
                        cnt++;
                    }
                }
            }
            else {
                array = (new bool[length]).Select((b) => { return true; }).ToArray();
                cnt = length;

                while(cnt > tgt) {
                    index = dr.Next();

                    if(array[index]) {
                        array[index] = false;
                        cnt--;
                    }
                }
            }


            return array;
        }
    }
}
